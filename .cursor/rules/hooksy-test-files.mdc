# Hooksy 测试文件规范

## 导入规范
```tsx
import { renderHook, act } from "@testing-library/react";
import { describe, it, expect, vi, beforeEach, afterEach } from "vitest";
import { useHookName } from "./index";
```

## 测试结构要求
```tsx
// 模拟环境设置
const mockDocument = { /* ... */ } as any;
const mockWindow = { /* ... */ } as any;

beforeEach(() => {
    // 重置模拟
    vi.clearAllMocks();
    // 设置全局对象
    global.document = mockDocument;
    global.window = mockWindow;
});

afterEach(() => {
    // 恢复全局对象
    (global as any).document = undefined;
    (global as any).window = undefined;
});

describe("useHookName", () => {
    // 测试用例...
});
```

## 测试用例命名规范
- 使用中文描述，清晰表达测试目的
- 格式：`应该 + 预期行为`
- 示例：
  - `应该返回正确的初始值`
  - `应该处理自定义配置选项`
  - `应该在组件卸载时清理资源`

## 测试覆盖要求
- ✅ 基本功能测试
- ✅ 配置选项测试
- ✅ 边界情况测试
- ✅ 生命周期测试
- ✅ 错误处理测试

## 模拟对象规范
- 模拟 DOM 环境（document, window）
- 模拟浏览器 API（MutationObserver, EventTarget）
- 模拟事件系统（addEventListener, removeEventListener）
- 使用 `vi.fn()` 创建模拟函数

## 断言规范
- 使用 `expect()` 进行断言
- 检查函数调用：`expect(mockFunction).toHaveBeenCalledWith(...)`
- 检查返回值：`expect(result.current.current).toBe(expectedValue)`
- 检查事件监听器：`expect(addEventListener).toHaveBeenCalledWith(...)`

## 事件模拟
```tsx
// 模拟事件触发
const eventHandler = mockDocument.addEventListener.mock.calls.find(
    (call: any[]) => call[0] === "eventName"
)?.[1];

if (eventHandler) {
    act(() => {
        eventHandler();
    });
}
```

## 生命周期测试
```tsx
it("应该在组件卸载时清理资源", () => {
    const { unmount } = renderHook(() => useHookName());

    unmount();

    expect(mockFunction).toHaveBeenCalled();
});
```
